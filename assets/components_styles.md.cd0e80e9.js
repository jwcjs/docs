import{_ as t,r as l,o as p,c,g as s,d as a,b as e,a as o}from"./app.b88fd067.js";const x=JSON.parse('{"title":"Styles","description":"","frontmatter":{},"headers":[{"level":2,"title":"Class Based","slug":"class-based","link":"#class-based","children":[]},{"level":2,"title":"Function Based","slug":"function-based","link":"#function-based","children":[]}],"relativePath":"components/styles.md","lastUpdated":1671513924000}'),r={name:"components/styles.md"},i=s("h1",{id:"styles",tabindex:"-1"},[a("Styles "),s("a",{class:"header-anchor",href:"#styles","aria-hidden":"true"},"#")],-1),d=s("p",null,"Styles are one of the most important parts of a component. You can define the styles of a component in two ways.",-1),y={class:"vp-code-group"},D={class:"tabs"},C=s("input",{type:"radio",name:"group-OW1sq",id:"tab-XLKbfVB",checked:"checked"},null,-1),F=s("label",{for:"tab-XLKbfVB"},"Class Based",-1),_=s("input",{type:"radio",name:"group-OW1sq",id:"tab-Vn_Ezoj"},null,-1),A={for:"tab-Vn_Ezoj"},u=o(`<div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> styles </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./app.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">JwcComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> styles </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JwcComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// no yet implemented</span></span>
<span class="line"></span></code></pre></div></div>`,1),h=o(`<h2 id="class-based" tabindex="-1">Class Based <a class="header-anchor" href="#class-based" aria-hidden="true">#</a></h2><p>The <code>css</code> property of the <code>@JwcComponent</code> decorator is used to define the CSS of the component. The CSS is applied to the shadow DOM of the component.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">JwcComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> styles </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The <code>styles</code> variable is a string that contains the CSS. You can use any CSS preprocessor you want. The CSS is automatically compiled to CSS.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> styles </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./app.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In <code>Vite</code>, the CSS import method is became different. You should add <code>?inline</code> to the end of the import statement.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// In Vite</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> styles </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./app.css?inline</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></div>`,6),m={id:"function-based",tabindex:"-1"},b=s("a",{class:"header-anchor",href:"#function-based","aria-hidden":"true"},"#",-1),f=s("p",null,"Not yet implemented",-1);function g(S,v,B,T,E,k){const n=l("Badge");return p(),c("div",null,[i,d,s("div",y,[s("div",D,[C,F,_,s("label",A,[a("Function Based "),e(n,{text:"Not yet implemented",type:"danger"})])]),u]),h,s("h2",m,[a("Function Based "),e(n,{text:"Not yet implemented",type:"danger"}),a(),b]),f])}const q=t(r,[["render",g]]);export{x as __pageData,q as default};
