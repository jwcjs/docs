import{_ as t,r as l,o as p,c,g as s,d as n,b as a,a as o}from"./app.6ce9f6b6.js";const V=JSON.parse('{"title":"Rendering a Component","description":"","frontmatter":{},"headers":[{"level":2,"title":"Class Based","slug":"class-based","link":"#class-based","children":[]},{"level":2,"title":"Function Based","slug":"function-based","link":"#function-based","children":[]}],"relativePath":"components/rendering.md","lastUpdated":1671543397000}'),r={name:"components/rendering.md"},d=s("h1",{id:"rendering-a-component",tabindex:"-1"},[n("Rendering a Component "),s("a",{class:"header-anchor",href:"#rendering-a-component","aria-hidden":"true"},"#")],-1),i=s("p",null,"You have 2 choices for rendering a component:",-1),y={class:"vp-code-group"},D={class:"tabs"},F=s("input",{type:"radio",name:"group-oYIuf",id:"tab-fQCN7TV",checked:"checked"},null,-1),_=s("label",{for:"tab-fQCN7TV"},"Class Based",-1),C=s("input",{type:"radio",name:"group-oYIuf",id:"tab-s7JQnKL"},null,-1),h={for:"tab-s7JQnKL"},u=o(`<div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">JwcComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JwcComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello World</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// no yet implemented</span></span>
<span class="line"></span></code></pre></div></div>`,1),m=o(`<h2 id="class-based" tabindex="-1">Class Based <a class="header-anchor" href="#class-based" aria-hidden="true">#</a></h2><p>Add a template to your component by adding a <code>render</code> method. The <code>render</code> method returns a <code>JSX Element</code>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Different from React, we use <code>class</code> to define component className. Like this:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-class</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;">// not &lt;div className=&quot;my-class&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span></code></pre></div></div><p><code>render</code> method will return a VNode, which is a virtual node. It is a lightweight representation of a DOM node. It is used to create the DOM node.</p><p>we will call <code>render</code> method when the component is connected to the DOM.</p>`,5),A={id:"function-based",tabindex:"-1"},g=s("a",{class:"header-anchor",href:"#function-based","aria-hidden":"true"},"#",-1),b=s("p",null,"Not yet implemented",-1);function v(f,N,T,x,B,k){const e=l("Badge");return p(),c("div",null,[d,i,s("div",y,[s("div",D,[F,_,C,s("label",h,[n("Function Based "),a(e,{text:"Not yet implemented",type:"danger"})])]),u]),m,s("h2",A,[n("Function Based "),a(e,{text:"Not yet implemented",type:"danger"}),n(),g]),b])}const w=t(r,[["render",v]]);export{V as __pageData,w as default};
