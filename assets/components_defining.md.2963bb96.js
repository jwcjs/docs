import{_ as p,r as l,o as t,c,g as s,d as n,b as o,a as e}from"./app.6ce9f6b6.js";const k=JSON.parse('{"title":"Defining a Component","description":"","frontmatter":{},"headers":[{"level":2,"title":"Class Based","slug":"class-based","link":"#class-based","children":[]},{"level":2,"title":"Function Based","slug":"function-based","link":"#function-based","children":[]}],"relativePath":"components/defining.md","lastUpdated":1671543397000}'),r={name:"components/defining.md"},i=s("h1",{id:"defining-a-component",tabindex:"-1"},[n("Defining a Component "),s("a",{class:"header-anchor",href:"#defining-a-component","aria-hidden":"true"},"#")],-1),y=s("p",null,[n("Define a Jwc component by creating a class that extends "),s("code",null,"JwcComponent"),n(" or a function that returns a "),s("code",null,"JSX Element"),n(".")],-1),D={class:"vp-code-group"},d={class:"tabs"},C=s("input",{type:"radio",name:"group-VmnA2",id:"tab-aJGM1Bs",checked:"checked"},null,-1),A=s("label",{for:"tab-aJGM1Bs"},"Class Based",-1),F=s("input",{type:"radio",name:"group-VmnA2",id:"tab-p56npZa"},null,-1),u={for:"tab-p56npZa"},h=e(`<div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">JwcComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JwcComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// no yet implemented</span></span>
<span class="line"></span></code></pre></div></div>`,1),m=e(`<h2 id="class-based" tabindex="-1">Class Based <a class="header-anchor" href="#class-based" aria-hidden="true">#</a></h2><p>The <code>@JwcComponent</code> decorator is used to define a Jwc component. It takes an object with the following properties:</p><ul><li><code>name</code> - The name of the component. This is used to identify the component in the DOM. It must be unique.</li><li><a href="./styles.html"><code>css</code></a> - The CSS to be applied to the component. The CSS is applied to the shadow DOM of the component.</li><li><code>options</code> - The options to be passed to the component. Follows the ElementDefinitionOptions interface from the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define#Parameters" target="_blank" rel="noreferrer">Custom Elements API</a>.</li></ul><p>I recommend you do not use JavaScript to define your component. Instead, use TypeScript. This will allow you to use the <code>@JwcComponent</code> decorator to define your component.</p><p>But if you do use JavaScript or you want to define without using the decorator:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki has-diff"><code><span class="line diff add"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> options </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line diff add"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line diff add"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">JwcComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JwcComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// inject options into the component</span></span>
<span class="line diff add"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">options</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line diff add"><span style="color:#A6ACCD;">  customElements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> App</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">options)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>Make sure to inject the options into the component. This is required for the component to work properly.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki has-focused-lines"><code><span class="line"><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JwcComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// MAKE SURE: inject options into the component</span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">options</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;">/* ... */</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Although you can define a component without using the <code>@JwcComponent</code> decorator, it is not recommended. We won&#39;t use that in our documentation.</p></div>`,9),_={id:"function-based",tabindex:"-1"},f=s("a",{class:"header-anchor",href:"#function-based","aria-hidden":"true"},"#",-1),g=s("p",null,"Not yet implemented.",-1);function b(E,B,v,w,T,x){const a=l("Badge");return t(),c("div",null,[i,y,s("div",D,[s("div",d,[C,A,F,s("label",u,[n("Function Based "),o(a,{text:"Not yet implemented",type:"danger"})])]),h]),m,s("h2",_,[n("Function Based "),o(a,{text:"Not yet implemented",type:"danger"}),n(),f]),g])}const J=p(r,[["render",b]]);export{k as __pageData,J as default};
